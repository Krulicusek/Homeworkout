@page "/login"
@using Newtonsoft.Json;
@using HomeWorkoutModels.Models;
@using SharedUILibrary.Services;
@using System.IdentityModel.Tokens.Jwt;
@using System.Security.Claims;
@using SharedUILibrary.Interfaces;
@inject IAppService AppService;
@inject NavigationManager NavManager;
<h3>Login</h3>

<EditForm Model="@loginModel" OnValidSubmit="Submit">
    <DataAnnotationsValidator />
    <div class="form-group">
        <label>Email address</label>
        <input type="email" @bind-value="loginModel.Email" class="form-control" placeholder="Enter email">
        <ValidationMessage For="@(()=> loginModel.Email)" />
    </div>

    <div class="mt-2 form-group">
        <label>Password</label>
        <input type="password" @bind-value="loginModel.Password" class="form-control" placeholder="Password">
        <ValidationMessage For="@(()=> loginModel.Password)" />
    </div>

    <div class="mt-2 text-end">
        <NavLink class="nav-link" href="registration">
            <span>Click here to create new account!</span>
        </NavLink>
    </div>

    <div ckass="text-center mt-2">
        <Button Type="@ButtonType.Primary" HtmlType="submit">
            <span class="@_spinnderClass" role="status" aroa-hidden="true"></span>
            Sign in
        </Button>
    </div>
</EditForm>

@code {
    LoginModel loginModel = new();

    private string _spinnderClass = "";

    private async void Submit()
    {
        _spinnderClass = "spinner-border spinner-border-sm";
        var response = await AppService.AuthenticateUser(loginModel);
        if (!string.IsNullOrWhiteSpace(response))
        {
            var handler = new JwtSecurityTokenHandler();
            var jsontoken = handler.ReadJwtToken(response) as JwtSecurityToken;
            string userId = jsontoken.Claims.FirstOrDefault(a => a.Type == ClaimTypes.NameIdentifier).Value;
            string userName = jsontoken.Claims.FirstOrDefault(a => a.Type == ClaimTypes.Name).Value;
            string userEmail = jsontoken.Claims.FirstOrDefault(a => a.Type == ClaimTypes.Email).Value;
            string userSurname = jsontoken.Claims.FirstOrDefault(a => a.Type == ClaimTypes.Surname).Value;
            string userRole = jsontoken.Claims.FirstOrDefault(a => a.Type == ClaimTypes.Role).Value;

            var userBasicDetail = new UserBasicDetail()
            {
                Id = userId,
                Name = userName,
                Surname = userSurname,
                Email = userEmail,
                Role = userRole,
                Token = response,
            };

            string userBasicInfoStr = JsonConvert.SerializeObject(userBasicDetail);
            await SecureStorage.SetAsync(nameof(Setting.UserBasicDetail), userBasicInfoStr);
            Setting.UserBasicDetail = userBasicDetail;
            NavManager.NavigateTo("/exercise");
        }
        else
        {
            await App.Current.MainPage.DisplayAlert("Oops", "Invalid email or password!", "OK");
        }
        _spinnderClass = "";
        this.StateHasChanged();

    }
}
