@using System.ComponentModel.DataAnnotations;
@using System.Text.Json;
@using System.ComponentModel
@using HomeWorkoutModels
@using System.Net.Http;
@using System.Security.Claims
@using System.Web

@attribute [AllowAnonymous]
@inject HttpClient Http
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager Navigation

@page "/login"
@layout NoMenuLayout
<PageTitle>Login</PageTitle>



<div class="container">
    <div class="d-flex flex-column min-vh-100 justify-content-center align-items-center"
        <EditForm Model=@usrPwd OnValidSubmit=@ValidFormSubmitted
                  OnInvalidSubmit=@InvalidFormSubmitted>
            <DataAnnotationsValidator />
            <ValidationSummary />
            <h1>Login</h1>
            <br>
            <label>Username</label><br>
            <InputText type="text" placeholder="Username" @bind-Value="@usrPwd.Username" />
            <br><br>
            <label>Password</label><br>
            <InputText type="password" placeholder="Password" @bind-Value="@usrPwd.Pwd" />
            <br><br>
            <Button Type="@ButtonType.Primary">
                Submit
            </Button>
        </EditForm>
    </div>
</div>

@code
{
    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationStateTask { get; set; } // = null!;

    private UsrPwd usrPwd = new();

    private async void ValidFormSubmitted(EditContext editContext)
    {   
        string json = JsonSerializer.Serialize(usrPwd);

        StringContent httpContent = new StringContent(json, System.Text.Encoding.UTF8, "application/json");
        HttpResponseMessage response = await Http.PostAsync("/Authorize/login", httpContent);
        AuthenticationStateTask = AuthenticationStateProvider.GetAuthenticationStateAsync();
        var auth = await AuthenticationStateTask;
        if (auth.User.Identity.IsAuthenticated)
        {
            Navigation.NavigateTo("/", true);
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        var authState = await AuthenticationStateTask;
        var user = authState.User;
        if (user.Identity.IsAuthenticated)
        {
            Navigation.NavigateTo("/", true);
        }

    }
    private void InvalidFormSubmitted(EditContext editContext)
    {
        Console.WriteLine($"Failed:{JsonSerializer.Serialize(usrPwd)}");
    }
}