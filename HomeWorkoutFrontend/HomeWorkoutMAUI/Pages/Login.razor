@using System.ComponentModel.DataAnnotations;
@using System.Text.Json;
@using System.ComponentModel
@using HomeWorkoutModels
@using System.Net.Http;
@using System.Security.Claims
@using System.Web

@attribute [AllowAnonymous]
@inject HttpClient Http
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager Navigation

@page "/login"
@layout NoMenuLayout
<PageTitle>Login</PageTitle>
@*<div class="container">
    <div class="d-flex flex-column min-vh-100 justify-content-center align-items-center"*@
         <Form Model="@usrPwd"
      OnFinish="ValidFormSubmitted"
      OnFinishFailed="InvalidFormSubmitted"
          LabelColSpan="8"
          WrapperColSpan="16">
        <FormItem>
        <Input @bind-Value="@usrPwd.Username" />
        </FormItem>
        <FormItem Label="Password">
        <InputPassword @bind-Value="@usrPwd.Pwd" />
        </FormItem>
        <FormItem WrapperColOffset="8" WrapperColSpan="16">
            <Checkbox @bind-Value="@RememberMe">Remember me</Checkbox>
        </FormItem>
        <FormItem WrapperColOffset="8" WrapperColSpan="16">
            <Button Type="@ButtonType.Primary" HtmlType="submit">
                Submit
            </Button>
        </FormItem>
    </Form>
@*    </div>
</div>*@

@code
{
    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationStateTask { get; set; } // = null!;

    private UsrPwd usrPwd = new();
    private bool RememberMe { get; set; } = true;
    private async void ValidFormSubmitted(EditContext editContext)
    {   
        string json = JsonSerializer.Serialize(usrPwd);

        StringContent httpContent = new StringContent(json, System.Text.Encoding.UTF8, "application/json");
        HttpResponseMessage response = await Http.PostAsync("/Authorize/login", httpContent);
        AuthenticationStateTask = AuthenticationStateProvider.GetAuthenticationStateAsync();
        var auth = await AuthenticationStateTask;
        if (auth.User.Identity.IsAuthenticated)
        {
            Navigation.NavigateTo("/", false);
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        var authState = await AuthenticationStateTask;
        var user = authState.User;
        if (user.Identity.IsAuthenticated)
        {
            Navigation.NavigateTo("/", true);
        }

    }
    private void InvalidFormSubmitted(EditContext editContext)
    {
        Console.WriteLine($"Failed:{JsonSerializer.Serialize(usrPwd)}");
    }
}
