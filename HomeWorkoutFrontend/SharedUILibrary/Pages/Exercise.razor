@using SharedUILibrary.Interfaces;
@inject ExerciseService ExerciseService
@inject NavigationManager navigationManager
@inject ICrudExerciseService CrudExerciseService;

@if (isPhisio)
{
<Button OnClick="() =>Add()">Add exercise</Button>
<br />
<br />
<br />
}
<GridRow Type="flex" Justify="center">
    
    <Space Size="@size" Direction="DirectionVHType.Vertical">
        @if (exerciseList != null)
        {
            @foreach (ExerciseModel exercise in exerciseList)
            {
                <GridCol>
                    <SpaceItem>
                        <Card Style="width:300px" Title="@exercise.Name">
                            <Body>
                                <Space Size="@size" Direction="DirectionVHType.Vertical">
                                    <SpaceItem>
                                        <Image Src="@exercise.ImageSource" Width="250px" />
                                    </SpaceItem>
                                    <SpaceItem>
                                        <CardMeta Description="@exercise.Description" />
                                    </SpaceItem>
                                </Space>
                            </Body>
                            <Extra>
                                @if (isPhisio){
                                <Button OnClick="() =>Edit(exercise.Id)">Edit </Button>
                                <Button OnClick="() => ShowModal(exercise.Id)">
                                    Delete
                                </Button>
                                }
                                <Modal Title="@("Delete")"
                                    Visible="@_visible"
                                    OnOk="HandleOk"
                                    OnCancel="@HandleCancel"
                                    ConfirmLoading="@_confirmLoading">
                                    <p>@_modalText</p>
                                </Modal>
                            </Extra>
                        </Card>
                    </SpaceItem>
                </GridCol>
            }
        }
    </Space>
</GridRow>


@code {
    private string size = "large";
    private List<ExerciseModel> exerciseList;
    private int idToDelete;

    protected override async Task OnInitializedAsync()
    {
        exerciseList = ExerciseService.GetExerciseModels();
    }

    private void Edit(int id)
    {
        navigationManager.NavigateTo($"/edit/{id}");
    }

    bool _visible = false;
    bool _confirmLoading = false;
    string _modalText = "Are you sure you want to delete this exercise?";

    private void ShowModal(int id)
    {
        _visible = true;
        idToDelete = id;

    }


    private async Task HandleOk()
    {
        _modalText = "Are you sure you want to delete this exercise?";
        _confirmLoading = true;
        StateHasChanged();
        var result = await CrudExerciseService.DeleteAsync(idToDelete);
        _visible = false;
        _confirmLoading = false;
        if (result == true)
            navigationManager.NavigateTo(navigationManager.Uri, forceLoad: true);
    }

    private void HandleCancel(MouseEventArgs e)
    {
        _visible = false;
    }

    private void Add()
    {
        navigationManager.NavigateTo($"/add");
    }

    private bool isPhisio
    {
        get
        {
            return Setting.UserBasicDetail != null ? Setting.UserBasicDetail.Role == "physiotherapist" : false;
        }
    }
}
